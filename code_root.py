import sys
import tkinter as tk
from tkinter import ttk
from tkinter import messagebox
import speech_recognition as sr
from sympy import sympify
from decimal import Decimal, InvalidOperation 
import openpyxl

# C·∫•u h√¨nh UTF-8 ƒë·ªÉ h·ªó tr·ª£ ti·∫øng Vi·ªát & ti·∫øng Nga
sys.stdout.reconfigure(encoding='utf-8')

# B·∫£ng chuy·ªÉn ƒë·ªïi t·ª´ ti·∫øng Vi·ªát v√† ti·∫øng Nga sang k√Ω hi·ªáu to√°n h·ªçc
TRANSLATION_DICT = {
    "c·ªông": "+", "tr·ª´": "-", "nh√¢n": "*", "chia": "/", "m≈©": "**", "b·∫±ng": "=",
    "–ø–ª—é—Å": "+", "–º–∏–Ω—É—Å": "-", "—É–º–Ω–æ–∂–∏—Ç—å": "*", "—Ä–∞–∑–¥–µ–ª–∏—Ç—å": "/", "—Å—Ç–µ–ø–µ–Ω–∏": "**", "—Ä–∞–≤–Ω–æ": "=",
    "x": "*",  # Th√™m v√†o ƒë·ªÉ chuy·ªÉn "x" th√†nh d·∫•u nh√¢n *
}

class VoiceCalculatorApp:
    def __init__(self, root):
        self.root = root
        self.root.title("–ö–æ–º–ø—å—é—Ç–µ—Ä —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–∞")
        self.root.geometry("500x600")  # M·ªü r·ªông k√≠ch th∆∞·ªõc c·ª≠a s·ªï ƒë·ªÉ ch·ª©a b·∫£ng
        self.root.resizable(False, False)

        # Nh√£n ch·ªçn ng√¥n ng·ªØ
        self.label_lang = tk.Label(root, text="–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:")
        self.label_lang.pack(pady=5)

        # Dropdown ch·ªçn ng√¥n ng·ªØ
        self.lang_var = tk.StringVar(value="vi-VN")
        self.lang_menu = ttk.Combobox(root, textvariable=self.lang_var, values=["vi-VN", "ru-RU"])
        self.lang_menu.pack(pady=5)

        # N√∫t nh·∫≠n di·ªán gi·ªçng n√≥i
        self.button_listen = tk.Button(root, text="üé§ –ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –≥–æ–≤–æ—Ä–∏—Ç—å", command=self.recognize_speech)
        self.button_listen.pack(pady=10)

        # Nh√£n hi·ªÉn th·ªã ph√©p t√≠nh
        self.label_expression = tk.Label(root, text="–í—ã—Ä–∞–∂–µ–Ω–∏–µ:", font=("Arial", 12))
        self.label_expression.pack(pady=5)

        # √î hi·ªÉn th·ªã bi·ªÉu th·ª©c to√°n h·ªçc
        self.expression_var = tk.StringVar()
        self.entry_expression = tk.Entry(root, textvariable=self.expression_var, font=("Arial", 14), justify="center")
        self.entry_expression.pack(pady=5, padx=20, fill="x")

        # Nh√£n k·∫øt qu·∫£
        self.label_result = tk.Label(root, text="–†–µ–∑—É–ª—å—Ç–∞—Ç:", font=("Arial", 12))
        self.label_result.pack(pady=5)

        # √î hi·ªÉn th·ªã k·∫øt qu·∫£
        self.result_var = tk.StringVar()
        self.entry_result = tk.Entry(root, textvariable=self.result_var, font=("Arial", 14), justify="center", state="readonly")
        self.entry_result.pack(pady=5, padx=20, fill="x")

        # N√∫t l∆∞u k·∫øt qu·∫£ v√†o Excel
        self.button_save = tk.Button(root, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", command=self.save_to_excel)
        self.button_save.pack(pady=10)

        # N√∫t x√≥a ph√©p t√≠nh
        self.button_clear = tk.Button(root, text="‚ùå –Ø—Å–Ω—ã–π —Ä–∞—Å—á–µ—Ç", command=self.clear_calculation)
        self.button_clear.pack(pady=10)

        # N√∫t h·ªßy ph√©p t√≠nh
        self.button_cancel = tk.Button(root, text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ä–∞—Å—á–µ—Ç", command=self.cancel_calculation)
        self.button_cancel.pack(pady=10)

        # N√∫t in b·∫£ng Excel
        self.button_print_excel = tk.Button(root, text="üìÑ –†–∞—Å–ø–µ—á–∞—Ç–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É", command=self.print_excel)
        self.button_print_excel.pack(pady=10)

        # Treeview ƒë·ªÉ hi·ªÉn th·ªã b·∫£ng Excel
        self.treeview = ttk.Treeview(root, columns=("Expression", "Result"), show="headings", height=10)
        self.treeview.heading("Expression", text="Bi·ªÉu th·ª©c")
        self.treeview.heading("Result", text="K·∫øt qu·∫£")
        self.treeview.pack(pady=10, padx=20, fill="x")

    def recognize_speech(self):
        recognizer = sr.Recognizer()
        with sr.Microphone() as source:
            self.result_var.set("‚è≥ –°–ª—É—à–∞–Ω–∏–µ...")
            self.root.update()
            try:
                audio = recognizer.listen(source, timeout=5, phrase_time_limit=5)  # Thi·∫øt l·∫≠p th·ªùi gian nghe t·ªëi ƒëa cho m·ªói c√¢u
                language = self.lang_var.get()
                text = recognizer.recognize_google(audio, language=language).strip().lower()
                self.expression_var.set(self.convert_to_math(text))

                # T·ª± ƒë·ªông t√≠nh to√°n sau khi nghe xong
                expression = self.expression_var.get()
                if expression:
                    result = self.calculate(expression)
                    self.result_var.set(self.format_result(result))

            except sr.UnknownValueError:
                self.result_var.set("‚ùå –ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω!")
            except sr.RequestError:
                self.result_var.set("‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è!")

    def convert_to_math(self, expression):
        words = expression.split()
        return " ".join([TRANSLATION_DICT.get(word, word) for word in words])

    def calculate(self, expression):
        try:
            return sympify(expression).evalf()
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞: {e}"

    def format_result(self, result):
        # S·ª≠ d·ª•ng Decimal ƒë·ªÉ x·ª≠ l√Ω k·∫øt qu·∫£ v√† lo·∫°i b·ªè s·ªë 0 th·ª´a
        decimal_result = Decimal(str(result))
        if decimal_result == decimal_result.to_integral_value():
            return str(int(decimal_result))  # Chuy·ªÉn th√†nh ki·ªÉu int n·∫øu l√† s·ªë nguy√™n
        else:
            return str(decimal_result)  # N·∫øu c√≥ ph·∫ßn th·∫≠p ph√¢n th√¨ gi·ªØ nguy√™n

    def save_to_excel(self):
        try:
            # T·∫°o ho·∫∑c m·ªü file Excel
            wb = openpyxl.load_workbook("luu_file.xlsx")
            sheet = wb.active

            # Th√™m ti√™u ƒë·ªÅ n·∫øu l√† l·∫ßn ƒë·∫ßu
            if sheet.max_row == 1:
                sheet.append(["Bi·ªÉu th·ª©c", "K·∫øt qu·∫£"])

            # L∆∞u bi·ªÉu th·ª©c v√† k·∫øt qu·∫£ v√†o Excel
            expression = self.expression_var.get()
            result = self.result_var.get()
            sheet.append([expression, result])

            # L∆∞u file
            wb.save("luu_file.xlsx")
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.!")

            # X√≥a ph√©p t√≠nh
            self.clear_calculation()

        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å : {e}")

    def clear_calculation(self):
        # X√≥a ph√©p t√≠nh v√† k·∫øt qu·∫£
        self.expression_var.set("")
        self.result_var.set("")

    def cancel_calculation(self):
        # X√≥a ph√©p t√≠nh v√† k·∫øt qu·∫£ m√† kh√¥ng l∆∞u
        self.clear_calculation()
        messagebox.showinfo("–û—Ç–º–µ–Ω–∏—Ç—å —Ä–∞—Å—á–µ—Ç", "–†–∞—Å—á–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω.")

    def print_excel(self):
        # ƒê·ªçc v√† hi·ªÉn th·ªã d·ªØ li·ªáu t·ª´ file Excel v√†o Treeview
        try:
            wb = openpyxl.load_workbook("luu_file.xlsx")
            sheet = wb.active

            # X√≥a c√°c d√≤ng c≈© trong treeview
            for row in self.treeview.get_children():
                self.treeview.delete(row)

            # ƒê·ªçc d·ªØ li·ªáu t·ª´ sheet v√† th√™m v√†o treeview
            for row in sheet.iter_rows(min_row=2, values_only=True):  # B·ªè qua d√≤ng ti√™u ƒë·ªÅ
                self.treeview.insert("", "end", values=row)

        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å : {e}")
    
    def format_result(self, result):
        try:
            # Ki·ªÉm tra xem k·∫øt qu·∫£ c√≥ ph·∫£i l√† s·ªë h·ª£p l·ªá kh√¥ng
            decimal_result = Decimal(str(result))
            # N·∫øu l√† s·ªë nguy√™n, chuy·ªÉn th√†nh int
            if decimal_result == decimal_result.to_integral_value():
                return str(int(decimal_result))  # Chuy·ªÉn th√†nh ki·ªÉu int n·∫øu l√† s·ªë nguy√™n
            else:
                return str(decimal_result)  # N·∫øu c√≥ ph·∫ßn th·∫≠p ph√¢n th√¨ gi·ªØ nguy√™n
        except (ValueError, InvalidOperation):
            # Tr∆∞·ªùng h·ª£p n·∫øu k·∫øt qu·∫£ kh√¥ng h·ª£p l·ªá
            return "‚ùå L·ªói: K·∫øt qu·∫£ kh√¥ng h·ª£p l·ªá!"


if __name__ == "__main__":
    root = tk.Tk()
    app = VoiceCalculatorApp(root)
    root.mainloop()
