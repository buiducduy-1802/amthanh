import sys
import tkinter as tk
from tkinter import ttk
import speech_recognition as sr
from sympy import sympify
from decimal import Decimal

# C·∫•u h√¨nh UTF-8 ƒë·ªÉ h·ªó tr·ª£ ti·∫øng Vi·ªát & ti·∫øng Nga
sys.stdout.reconfigure(encoding='utf-8')

# B·∫£ng chuy·ªÉn ƒë·ªïi t·ª´ ti·∫øng Vi·ªát v√† ti·∫øng Nga sang k√Ω hi·ªáu to√°n h·ªçc
TRANSLATION_DICT = {
    "c·ªông": "+", "tr·ª´": "-", "nh√¢n": "*", "chia": "/", "m≈©": "**", "b·∫±ng": "=",
    "–ø–ª—é—Å": "+", "–º–∏–Ω—É—Å": "-", "—É–º–Ω–æ–∂–∏—Ç—å": "*", "—Ä–∞–∑–¥–µ–ª–∏—Ç—å": "/", "—Å—Ç–µ–ø–µ–Ω–∏": "**", "—Ä–∞–≤–Ω–æ": "=",
    "x": "*",  # Th√™m v√†o ƒë·ªÉ chuy·ªÉn "x" th√†nh d·∫•u nh√¢n *
}

class VoiceCalculatorApp:
    def __init__(self, root):
        self.root = root
        self.root.title("M√°y t√≠nh nh·∫≠n di·ªán gi·ªçng n√≥i")
        self.root.geometry("400x300")
        self.root.resizable(False, False)

        # Nh√£n ch·ªçn ng√¥n ng·ªØ
        self.label_lang = tk.Label(root, text="Ch·ªçn ng√¥n ng·ªØ:")
        self.label_lang.pack(pady=5)

        # Dropdown ch·ªçn ng√¥n ng·ªØ
        self.lang_var = tk.StringVar(value="vi-VN")
        self.lang_menu = ttk.Combobox(root, textvariable=self.lang_var, values=["vi-VN", "ru-RU"])
        self.lang_menu.pack(pady=5)

        # N√∫t nh·∫≠n di·ªán gi·ªçng n√≥i
        self.button_listen = tk.Button(root, text="üé§ Nh·∫•n ƒë·ªÉ n√≥i", command=self.recognize_speech)
        self.button_listen.pack(pady=10)

        # Nh√£n hi·ªÉn th·ªã ph√©p t√≠nh
        self.label_expression = tk.Label(root, text="Bi·ªÉu th·ª©c:", font=("Arial", 12))
        self.label_expression.pack(pady=5)

        # √î hi·ªÉn th·ªã bi·ªÉu th·ª©c to√°n h·ªçc
        self.expression_var = tk.StringVar()
        self.entry_expression = tk.Entry(root, textvariable=self.expression_var, font=("Arial", 14), justify="center")
        self.entry_expression.pack(pady=5, padx=20, fill="x")

        # Nh√£n k·∫øt qu·∫£
        self.label_result = tk.Label(root, text="K·∫øt qu·∫£:", font=("Arial", 12))
        self.label_result.pack(pady=5)

        # √î hi·ªÉn th·ªã k·∫øt qu·∫£
        self.result_var = tk.StringVar()
        self.entry_result = tk.Entry(root, textvariable=self.result_var, font=("Arial", 14), justify="center", state="readonly")
        self.entry_result.pack(pady=5, padx=20, fill="x")

    def recognize_speech(self):
        recognizer = sr.Recognizer()
        with sr.Microphone() as source:
            self.result_var.set("‚è≥ ƒêang l·∫Øng nghe...")
            self.root.update()
            try:
                audio = recognizer.listen(source, timeout=5, phrase_time_limit=5)  # Thi·∫øt l·∫≠p th·ªùi gian nghe t·ªëi ƒëa cho m·ªói c√¢u
                language = self.lang_var.get()
                text = recognizer.recognize_google(audio, language=language).strip().lower()
                self.expression_var.set(self.convert_to_math(text))

                # T·ª± ƒë·ªông t√≠nh to√°n sau khi nghe xong
                expression = self.expression_var.get()
                if expression:
                    result = self.calculate(expression)
                    self.result_var.set(self.format_result(result))

            except sr.UnknownValueError:
                self.result_var.set("‚ùå Kh√¥ng nh·∫≠n di·ªán ƒë∆∞·ª£c!")
            except sr.RequestError:
                self.result_var.set("‚ùå L·ªói k·∫øt n·ªëi!")

    def convert_to_math(self, expression):
        words = expression.split()
        return " ".join([TRANSLATION_DICT.get(word, word) for word in words])

    def calculate(self, expression):
        try:
            return sympify(expression).evalf()
        except Exception as e:
            return f"‚ùå L·ªói: {e}"

    def format_result(self, result):
        # S·ª≠ d·ª•ng Decimal ƒë·ªÉ x·ª≠ l√Ω k·∫øt qu·∫£ v√† lo·∫°i b·ªè s·ªë 0 th·ª´a
        decimal_result = Decimal(str(result))
        if decimal_result == decimal_result.to_integral_value():
            return str(int(decimal_result))  # Chuy·ªÉn th√†nh ki·ªÉu int n·∫øu l√† s·ªë nguy√™n
        else:
            return str(decimal_result)  # N·∫øu c√≥ ph·∫ßn th·∫≠p ph√¢n th√¨ gi·ªØ nguy√™n

if __name__ == "__main__":
    root = tk.Tk()
    app = VoiceCalculatorApp(root)
    root.mainloop()
